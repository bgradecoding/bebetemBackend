openapi: 3.0.0
info:
  description: This is To-Do API service.
  version: 1.0.0
  title: To-Do API
servers:
  - url: "https://todo-pre.herokuapp.com"
tags:
  - name: todo
    description: Methods to access and manage todo
  - name: auth
    description: Methods to handle authentication

paths:
  /login:
    post:
      tags:
        - auth
      summary: Login to To-Do Service
      description: Login a user account for the given user details
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginInfo"
        required: true
      responses:
        "200":
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApiResponse"
  /user:
    post:
      tags:
        - auth
      summary: Create User in To-do Service
      description: Create a user account for the given user details
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUserInfo"
        required: true
      responses:
        "201":
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CUDResponse"
        "409":
          description: User Exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApiResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApiResponse"

  /todo/todo:
    get:
      tags:
        - todo
      summary: Get all todos optionally filtered by email
      description: >
        Fetches a list of todos. If email is provided, the list contains
        only todo by the given user.
      operationId: getTodo
      parameters:
        - name: header token
          description: tokenÏùÑ Ïù¥Ïö©ÌïòÏó¨ email Ï†ïÎ≥¥ ÌôïÏù∏
      responses:
        "200":
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoApiResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApiResponse"
      security:
        - jwt_auth: []

    post:
      tags:
        - todo
      summary: Get all todos optionally filtered by email
      description: >
        Fetches a list of todos. If email is provided, the list contains
        only todo by the given user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTodoInfo"
        required: true
      responses:
        "200":
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CUDResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApiResponse"
      security:
        - jwt_auth: []

    put:
      tags:
        - todo
      summary: Update todo's status filtered by email and id
      description: >
        Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò Ìà¨ÎëêÎ¶¨Ïä§Ìä∏ Ï§ë ÌïòÎÇòÏùò ÏÉÅÌÉúÎ•º Î∞îÍæ∏Îäî API
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTodoInfo"
        required: true
      responses:
        "200":
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CUDResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApiResponse"
      security:
        - jwt_auth: []
    delete:
      tags:
        - todo
      summary: delete todo filtered by email and id
      description: >
        Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò Ìà¨ÎëêÎ¶¨Ïä§Ìä∏ Ï§ë ÌïòÎÇòÎ•º ÏÇ≠Ï†úÌïòÎäî API
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteTodoInfo"
        required: true
      responses:
        "200":
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CUDResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorApiResponse"
      security:
        - jwt_auth: []

components:
  schemas:
    DeleteTodoInfo:
      type: object
      title: delete todo
      properties:
        email:
          type: string
        id:
          type: number
    UpdateTodoInfo:
      type: object
      title: update todo
      properties:
        email:
          type: string
        id:
          type: number
        todostatus:
          type: string
    NewTodoInfo:
      type: object
      title: new todo
      properties:
        email:
          type: string
        todoname:
          type: string
        todostatus:
          type: string
    TodoApiResponse:
      type: array
      items:
        $ref: "#/components/schemas/Todo"
    Todo:
      type: object
      title: todo
      properties:
        id:
          type: number
        email:
          type: string
        todoname:
          type: string
        todostatus:
          type: string
        tododate:
          type: string
    CUDResponse:
      type: object
      title: CUD Success Message
      properties:
        message:
          type: string
    UserLoginInfo:
      type: object
      title: User Login Info
      properties:
        email:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      title: Login Result Response Info
      properties:
        email:
          type: string
        password:
          type: string
        nickname:
          type: string
        accesToken:
          type: string
        refreshToken:
          type: string
    NewUserInfo:
      type: object
      title: User registration details
      properties:
        email:
          type: string
        password:
          type: string
          minLength: 5
        nickname:
          type: string
      required:
        - username
        - password
        - nickname
      example:
        email: admin@admin.com
        password: admin
        nickname: admin
    ErrorApiResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
      example:
        message: "Something went wrong ü§™"
  securitySchemes:
    jwt_auth:
      description: Bearer token authorization with JWT
      type: http
      scheme: bearer
      bearerFormat: JWT
